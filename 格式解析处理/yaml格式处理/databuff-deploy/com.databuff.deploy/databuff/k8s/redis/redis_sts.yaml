---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dc-redis # Unique name for the deployment
  labels:
    app: dc-redis       # Labels to be applied to this deployment
  namespace: databuff
spec:
  selector:
    matchLabels:     # This deployment applies to the Pods matching these labels
      app: dc-redis
      role: master
      tier: backend
  replicas: 1        # Run a single pod in the deployment
  serviceName: "redis-svc"
  template:          # Template for the pods that will be created by this deployment
    metadata:
      labels:        # Labels to be applied to the Pods in this deployment
        app: dc-redis
        role: master
        tier: backend
    spec:            # Spec for the container which will be run inside the Pod.
      containers:
        - name: dc-redis
          image: 192.168.50.212/library/redis:v6.0.9
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 500m
              memory: 500Mi
          #          command: ["redis-server","/etc/redis/redis.conf"]
          command:
            - redis-server
            - /etc/redis/redis.conf
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-config
              mountPath: /etc/redis/redis.conf
              subPath: redis.conf
            - name: redis-storage
              mountPath: /data
      imagePullSecrets:
      - name: docker-reg-secret
      volumes:
        - name: redis-storage
          persistentVolumeClaim:
            claimName: dc-redis-pvc
        - name: redis-config
          configMap:
            name: dc-redis-conf
            items:
              - key: redis.conf
                path: redis.conf
---
apiVersion: v1
kind: Service        # Type of Kubernetes resource
metadata:
  name: redis-svc # Name of the Kubernetes resource
  labels:            # Labels that will be applied to this resource
    app: dc-redis
    role: master
    tier: backend
  namespace: databuff
spec:
  type: NodePort
  ports:
    - port: 6379       # Map incoming connections on port 6379 to the target port 6379 of the Pod
      targetPort: 6379
      nodePort: 31379
  selector:          # Map any Pod with the specified labels to this service
    app: dc-redis
    role: master
    tier: backend